Setting up token-based authentication between an ASP.NET Web API and a React.js frontend involves several steps:
1. ASP.NET Web API:
Install Necessary Packages:
Install the Microsoft.AspNetCore.Authentication.JwtBearer package to handle JWT authentication.
Configure Authentication:
In your Startup.cs (or Program.cs in .NET 6 and above), configure JWT authentication:

// Program.cs (.NET 6 and above)
builder.Services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)
    .AddJwtBearer(options =>
    {
        options.TokenValidationParameters = new TokenValidationParameters
        {
            ValidateIssuer = true,
            ValidateAudience = true,
            ValidateLifetime = true,
            ValidateIssuerSigningKey = true,
            ValidIssuer = "your_issuer",
            ValidAudience = "your_audience",
            IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes("your_secret_key"))
        };
    });

Create Login Endpoint: In your API, create an endpoint to handle user login and generate a JWT token:

[HttpPost("login")]
public IActionResult Login([FromBody] UserCredentials credentials)
{
    // Validate the user credentials
    if (IsValidUser(credentials.Username, credentials.Password))
    {
        var token = GenerateJwtToken(credentials.Username);
        return Ok(new { Token = token });
    }

    return Unauthorized();
}


2. React.js Frontend:
Install Necessary Packages: Install axios (or another HTTP library) and optionally a library like jwt-decode to decode the JWT token.
Create Login Component: Create a login component to handle user authentication:

import axios from 'axios';

const Login = () => {
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      const response = await axios.post('/api/login', { username, password });
      localStorage.setItem('token', response.data.token);
      // Redirect to the protected route
    } catch (error) {
      // Handle login error
    }
  };

  // ... rest of the component
};


Protect Routes: Use a library like react-router-dom to protect routes that require authentication:

import { BrowserRouter, Routes, Route } from 'react-router-dom';
import PrivateRoute from './PrivateRoute';

const App = () => {
  return (
    <BrowserRouter>
      <Routes>
        <Route path="/login" element={<Login />} />
        <Route path="/dashboard" element={<PrivateRoute><Dashboard /></PrivateRoute>} />
      </Routes>
    </BrowserRouter>
  );
};


Axios Interceptor: Create an Axios interceptor to automatically attach the JWT token to requests:

axios.interceptors.request.use(config => {
  const token = localStorage.getItem('token');
  if (token) {
    config.headers.Authorization = `Bearer ${token}`;
  }
  return config;
});


3. Handling Token Expiration:
Implement refresh token functionality in your API to allow users to refresh their tokens without re-logging in.
Handle token expiration on the frontend by redirecting to the login page or prompting the user to log in again.
4. Security Considerations:
Store the JWT token securely on the frontend (e.g., in local storage with appropriate security measures).
Ensure your API follows best practices for JWT security, including strong signing keys and proper validation.