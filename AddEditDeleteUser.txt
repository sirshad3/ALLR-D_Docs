import React, { useState } from 'react';
import Modal from 'react-modal'; // Or your preferred modal library

function UserManagement() {
  const [users, setUsers] = useState([
    { id: 1, name: 'John Doe', email: 'john@example.com' },
    { id: 2, name: 'Jane Smith', email: 'jane@example.com' },
  ]);

  const [showModal, setShowModal] = useState(false);
  const [selectedUser, setSelectedUser] = useState(null);

  const handleOpenModal = (user) => {
    setSelectedUser(user);
    setShowModal(true);
  };

  const handleCloseModal = () => {
    setShowModal(false);
    setSelectedUser(null);
  };

  const handleUpdateUser = (updatedUser) => {
    setUsers(users.map(user => user.id === updatedUser.id ? updatedUser : user));
    handleCloseModal();
  };

  return (
    <div>
      {/* User List */}
      <table>
        <thead>
          <tr>
            <th>ID</th>
            <th>Name</th>
            <th>Email</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody>
          {users.map(user => (
            <tr key={user.id}>
              <td>{user.id}</td>
              <td>{user.name}</td>
              <td>{user.email}</td>
              <td>
                <button onClick={() => handleOpenModal(user)}>Edit</button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>

      {/* User Edit Modal */}
      <Modal isOpen={showModal} onRequestClose={handleCloseModal}>
        <h2>Edit User</h2>
        {selectedUser && (
          <form onSubmit={(e) => {
            e.preventDefault();
            handleUpdateUser({
              id: selectedUser.id,
              name: e.target.name.value,
              email: e.target.email.value,
            });
          }}>
            <div>
              <label htmlFor="name">Name:</label>
              <input type="text" id="name" defaultValue={selectedUser.name} />
            </div>
            <div>
              <label htmlFor="email">Email:</label>
              <input type="email" id="email" defaultValue={selectedUser.email} />
            </div>
            <button type="submit">Save</button>
            <button onClick={handleCloseModal}>Cancel</button>
          </form>
        )}
      </Modal>
    </div>
  );
}

export default UserManagement;



import React, { useState } from 'react';
import Modal from 'react-modal'; // Or any other modal library

function UserManagement() {
  const [users, setUsers] = useState([]);
  const [modalIsOpen, setModalIsOpen] = useState(false);
  const [modalMode, setModalMode] = useState('create'); // 'create', 'update' or 'delete'
  const [selectedUser, setSelectedUser] = useState({});

  // CRUD operations
  const createUser = (user) => {
    // Add user to users array (e.g., using an API call)
    setUsers([...users, user]);
    setModalIsOpen(false);
  };

  const readUsers = () => {
    // Fetch users from API
  };

  const updateUser = (user) => {
    // Update user in users array (e.g., using an API call)
    setUsers(users.map(u => u.id === user.id ? user : u));
    setModalIsOpen(false);
  };

  const deleteUser = (userId) => {
    // Delete user from users array (e.g., using an API call)
    setUsers(users.filter(u => u.id !== userId));
    setModalIsOpen(false);
  };

  // Modal handling
  const openModal = (mode, user = {}) => {
    setModalMode(mode);
    setSelectedUser(user);
    setModalIsOpen(true);
  };

  const closeModal = () => {
    setModalIsOpen(false);
  };

  return (
    <div>
      {/* Display user list */}
      {/* ... */}

      {/* Buttons for CRUD operations */}
      <button onClick={() => openModal('create')}>Create User</button>
      {/* ... */}

      {/* Modal */}
      <Modal isOpen={modalIsOpen} onRequestClose={closeModal}>
        {/* Modal content based on modalMode (create, update, delete) */}
        {/* ... */}
      </Modal>
    </div>
  );
}

export default UserManagement;




import React, { useState, useEffect } from 'react';
import Modal from 'react-bootstrap/Modal';
import Button from 'react-bootstrap/Button';
import 'bootstrap/dist/css/bootstrap.min.css';
import axios from 'axios';

function UserManagement() {
  const [users, setUsers] = useState([]);
  const [showModal, setShowModal] = useState(false);
  const [modalMode, setModalMode] = useState('create');
  const [selectedUser, setSelectedUser] = useState({});

  useEffect(() => {
    // Fetch users from API on component mount
    fetchUsers();
  }, []);

  const fetchUsers = async () => {
    try {
      const response = await axios.get('/api/users'); // Replace with your API endpoint
      setUsers(response.data);
    } catch (error) {
      console.error('Error fetching users:', error);
    }
  };

  const handleCreateUser = async () => {
    try {
      // Send POST request to create new user
      const response = await axios.post('/api/users', selectedUser);
      setUsers([...users, response.data]);
      handleCloseModal();
    } catch (error) {
      console.error('Error creating user:', error);
    }
  };

  const handleUpdateUser = async () => {
    try {
      // Send PUT request to update user
      await axios.put(`/api/users/${selectedUser.id}`, selectedUser);
      const updatedUsers = users.map(user => 
        user.id === selectedUser.id ? selectedUser : user
      );
      setUsers(updatedUsers);
      handleCloseModal();
    } catch (error) {
      console.error('Error updating user:', error);
    }
  };

  const handleDeleteUser = async (userId) => {
    try {
      // Send DELETE request to delete user
      await axios.delete(`/api/users/${userId}`);
      setUsers(users.filter(user => user.id !== userId));
    } catch (error) {
      console.error('Error deleting user:', error);
    }
  };

  const handleOpenModal = (mode, user = {}) => {
    setModalMode(mode);
    setSelectedUser(user);
    setShowModal(true);
  };

  const handleCloseModal = () => {
    setShowModal(false);
  };

  return (
    // ... JSX for rendering the table and modal
  );
}

export default UserManagement;